Here are some recursion-based questions, organized by levels of difficulty, that can be used for hands-on practice.

Level 1: Beginner

These questions focus on basic recursive concepts and simple problems that can be solved easily using recursion.

Factorial of a Number
Problem: Write a recursive function to calculate the factorial of a number n.
Input: n = 5
Output: 120

Fibonacci Sequence
Problem: Write a recursive function to find the nth Fibonacci number.
Input: n = 7
Output: 13

Sum of Digits
Problem: Write a recursive function to find the sum of digits of a given number.
Input: n = 1234
Output: 10

Power of a Number
Problem: Write a recursive function to calculate a^b (i.e., a raised to the power b).
Input: a = 2, b = 4
Output: 16

Reverse a String
Problem: Write a recursive function to reverse a string.
Input: s = "hello"
Output: "olleh"


Level 2: Intermediate

These problems involve a bit more complexity and recursion with multiple branches or additional conditions.

Palindrome Check
Problem: Write a recursive function to check if a string is a palindrome.
Input: s = "racecar"
Output: True

Sum of Array Elements
Problem: Write a recursive function to calculate the sum of all elements in an array.
Input: arr = [1, 2, 3, 4]
Output: 10

Greatest Common Divisor (GCD)
Problem: Write a recursive function to find the GCD of two numbers using Euclid's algorithm.
Input: a = 48, b = 18
Output: 6

Count Ways to Climb Stairs
Problem: You are climbing a staircase. You can take 1 or 2 steps at a time. Write a recursive function to count the number of ways to reach the nth step.
Input: n = 4
Output: 5

Binary Search (Recursive)
Problem: Implement binary search recursively to find a target element in a sorted array.
Input: arr = [1, 2, 3, 4, 5, 6], target = 4
Output: 3 (index)

Level 3: Advanced


Tower of Hanoi
Problem: Implement the Tower of Hanoi algorithm using recursion. Given n disks, print the steps required to move them from the source rod to the destination rod.
Input: n = 3
Output: A series of steps to move disks between rods.

Generate All Subsets (Power Set)
Problem: Write a recursive function to generate all subsets (the power set) of a given set.
Input: set = [1, 2, 3]
Output: [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]

N-Queens Problem
Problem: Write a recursive function to solve the N-Queens problem, which places n queens on an n x n chessboard such that no two queens attack each other.
Input: n = 4
Output: One or all valid board configurations.

Permutations of a String/Array
Problem: Write a recursive function to generate all permutations of a given string or array.
Input: s = "abc"
Output: ["abc", "acb", "bac", "bca", "cab", "cba"]

Sudoku Solver
Problem: Write a recursive backtracking solution to solve a Sudoku puzzle.
Input: A 9x9 partially filled grid of numbers.
Output: A fully solved Sudoku grid.


Level 4: Expert

Word Break Problem
Problem: Given a string and a dictionary of words, write a recursive function to determine if the string can be segmented into space-separated words from the dictionary.
Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: True

Longest Common Subsequence (LCS)
Problem: Write a recursive function to find the length of the longest common subsequence between two strings.
Input: s1 = "abcde", s2 = "ace"
Output: 3

Knight's Tour Problem
Problem: Write a recursive solution to the Knight's Tour problem, where a knight must visit all squares of an n x n chessboard exactly once.
Input: n = 5
Output: A valid knight's tour.

Partition Problem
Problem: Given a set of integers, write a recursive function to determine if it can be partitioned into two subsets such that the sum of elements in both subsets is the same.
Input: arr = [1, 5, 11, 5]
Output: True

Wildcard Pattern Matching
Problem: Write a recursive function to match two strings where one string contains wildcards ('?' matches any single character and '*' matches any sequence of characters).
Input: s1 = "abcde", pattern = "a*de"
Output: True




